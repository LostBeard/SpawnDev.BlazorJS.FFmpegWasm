@implements IDisposable
@using System.Text
@using System.Diagnostics

<div>
    <h3>@title</h3>
    <div style="@(loaded ? "" : "display: none;")">
        <video @ref=videoRef controls autoplay muted style="border: 1px solid black;"></video>
        <br />
        <button @onclick=Transcode>Transcode webm to mp4</button>
        <p>Open Developer Tools (Ctrl+Shift+I) to View Logs</p>
    </div>
    <div style="@(loaded ? "display: none;" : "")">
        <button disabled="@loadDisabled" @onclick=Load>@loadButtonText</button>
    </div>
    <p>Multi-thread Supported: @FFmpegFactory.MultiThreadSupported</p>
    <p>@LogMessage</p>
    <p>@ProgressMessage</p>
    <p>@(Math.Round(Stopwatch.Elapsed.TotalSeconds, 1)) seconds elapsed</p>
</div>

@code {
    /// <summary>
    /// Based on:
    /// https://ffmpegwasm.netlify.app/docs/getting-started/usage/
    /// </summary>

    public enum ThreadMode
    {
        AUTO,
        SINGLE_THREAD,
        MULTI_THREAD,
    }

    [Parameter]
    public ThreadMode FFmpegThreadMode { get; set; } = ThreadMode.AUTO;

    [Inject]
    BlazorJSRuntime JS { get; set; }

    [Inject]
    HttpClient HttpClient { get; set; }

    [Inject]
    FFmpegFactory FFmpegFactory { get; set; }

    bool loaded = false;
    bool loadDisabled = false;
    string title = "";
    string loadButtonText = "";
    ElementReference videoRef;
    HTMLVideoElement? videoEl = null;
    FFmpeg? FFmpeg = null;
    string LogMessage = "";
    string ProgressMessage = "";
    Stopwatch Stopwatch = new Stopwatch();

    protected override void OnInitialized()
    {
        switch (FFmpegThreadMode)
        {
            case ThreadMode.SINGLE_THREAD:
                title = "Transcode webm to mp4 video (single-thread)";
                loadButtonText = "Load ffmpeg-core single-thread(~31 MB)";
                break;
            case ThreadMode.MULTI_THREAD:
                title = "Transcode webm to mp4 video (multi-thread)";
                loadButtonText = "Load ffmpeg-core multi-thread (~31 MB)";
                if (!FFmpegFactory.MultiThreadSupported)
                {
                    loadDisabled = true;
                    LogMessage = "Multithread mode requires SharedArrayBuffer. See MDN SharedArrayBuffer documentation for more info.";
                }
                break;
            case ThreadMode.AUTO:
                title = "Transcode webm to mp4 video (auto detect)";
                loadButtonText = "Load ffmpeg-core auto detect (~31 MB)";
                break;
        }
    }

    async Task Load()
    {
        if (loaded) return;
        Stopwatch.Restart();
        await FFmpegFactory.Init();
        videoEl = new HTMLVideoElement(videoRef);
        FFmpeg = new FFmpeg();
        FFmpeg.OnLog += FFmpeg_OnLog;
        FFmpeg.OnProgress += FFmpeg_OnProgress;
        var useThreading = FFmpegThreadMode == ThreadMode.MULTI_THREAD || (FFmpegThreadMode == ThreadMode.AUTO && FFmpegFactory.MultiThreadSupported);
        var loadConfig = FFmpegFactory.MultiThreadSupported ? FFmpegFactory.CreateLoadCoreMTConfig() : FFmpegFactory.CreateLoadCoreConfig();
        try
        {
            await FFmpeg.Load(loadConfig);
            loaded = true;
            LogMessage = "FFmpeg loaded: " + (useThreading ? "multithread" : "single thread");
        }
        catch
        {
            LogMessage = "FFmpeg load failed: " + (useThreading ? "multithread" : "single thread");
        }
        Stopwatch.Stop();
        StateHasChanged();
    }

    async Task Transcode()
    {
        LogMessage = "Downloading source video";
        StateHasChanged();
        await FFmpeg.WriteFile("input.webm", await FFmpegFactory.FetchFile("https://raw.githubusercontent.com/ffmpegwasm/testdata/master/Big_Buck_Bunny_180_10s.webm"));
        Stopwatch.Restart();
        LogMessage = "Transcoding source video";
        StateHasChanged();
        var ret = await FFmpeg.Exec(new string[] { "-i", "input.webm", "output.mp4" });
        Stopwatch.Stop();
        LogMessage = "Source video transcoded";
        StateHasChanged();
        using var data = await FFmpeg.ReadFileUint8Array("output.mp4");
        if (videoEl != null)
        {
            using var blob = new Blob(new Uint8Array[] { data }, new BlobOptions { Type = "video/mp4" });
            var objSrc = URL.CreateObjectURL(blob);
            videoEl.Src = objSrc;
            videoEl.Load();
        }
    }

    void FFmpeg_OnLog(FFmpegLogEvent ev)
    {
        LogMessage = ev.Message;
        JS.Log("FFmpeg_OnLog", ev.Message);
        StateHasChanged();
    }

    void FFmpeg_OnProgress(FFmpegProgressEvent ev)
    {
        var progress = ev.Progress;
        var time = ev.Time;
        ProgressMessage = $"{progress * 100} % (transcoded time: {time / 1000000} s)";
        JS.Log("FFmpeg_OnProgress", ev.Time, ev.Progress);
        StateHasChanged();
    }

    public void Dispose()
    {
        if (FFmpeg != null)
        {
            FFmpeg.OnLog -= FFmpeg_OnLog;
            FFmpeg.OnProgress -= FFmpeg_OnProgress;
            FFmpeg.Terminate();
            FFmpeg.Dispose();
            FFmpeg = null;
        }
        if (videoEl != null)
        {
            videoEl.Dispose();
            videoEl = null;
        }
    }
}
