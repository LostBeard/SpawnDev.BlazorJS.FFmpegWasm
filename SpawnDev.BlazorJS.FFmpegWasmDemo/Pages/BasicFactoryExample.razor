@page "/"
@using System.Text
@using SpawnDev.BlazorJS
@using SpawnDev.BlazorJS.FFmpegWasm
@implements IDisposable

<h3>Basic Demo of ffmpeg.wasm in Blazor</h3>
<p>A simple demo of ffmpeg.wasm in Blazor WASM using SpawnDev.BlazorJS.FFmpegWASM packages</p>
<p><a href="https://github.com/LostBeard/SpawnDev.BlazorJS.FFmpegWasm/blob/main/SpawnDev.BlazorJS.FFmpegWasmDemo/Pages/BasicFactoryExample.razor">Page source code</a></p>
<video @ref=videoResult autoplay muted id="video-result" controls style="border: 1px solid black;"></video>
<br />
<div style="@(loaded ? "display: none;" : "")">
    <button @onclick=Load disabled="@(loaded || busy)" id="load-button">Load ffmpeg-core (~31 MB)</button>
    <br />
    <br />
</div>
<div style="@(!loaded ? "display: none;" : "")">
    Select file to test transcoding to mp4.
    <br />
    <input @ref=fileInputRef accept="video/*" type="file" disabled="@(!loaded || busy)" style="width: 100%;" />
    <br />
    Multithreading will be used: @FFmpegFactory.MultiThreadSupported
    <br />
    <br />
    <div style="width: 100%; background-color: grey; position: relative;">
        <div style="width: @(percentComplete)%; background-color: cadetblue; height: 36px;">

        </div>
        <div style="padding-top: 0; top: 0; left: 0; position: absolute; height: 100%; width: 100%; background-color: transparent; font-weight: bold; text-align: center; font-size: 24px;">
            @(Math.Round(percentComplete, 3)) %
        </div>
    </div>
</div>
<p>@logMessage</p>
<p>@progressMessage</p>
<p>Open Developer Tools (Ctrl+Shift+I) to View Logs</p>

<table>
    <thead>
        <tr>
            <th>Package</th>
            <th>Description</th>
            <th>Includes</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><strong>SpawnDev.BlazorJS.FFmpegWasm</strong> <br> <a href="https://www.nuget.org/packages/SpawnDev.BlazorJS.FFmpegWasm" rel="nofollow"><img src="https://camo.githubusercontent.com/912d8f52e6e91dcb14e1ec293cc99ad9b7fa6599b3a9f85ae60a1980594468ea/68747470733a2f2f62616467652e667572792e696f2f6e752f537061776e4465762e426c617a6f724a532e46466d7065675761736d2e737667" alt="NuGet version" data-canonical-src="https://badge.fury.io/nu/SpawnDev.BlazorJS.FFmpegWasm.svg" style="max-width: 100%;"></a></td>
            <td>ffmpeg.wasm for Blazor WASM</td>
            <td>ffmpeg/*<br>ffmpeg.js<br>814.ffmpeg.js</td>
        </tr>
        <tr>
            <td><strong>SpawnDev.BlazorJS.FFmpegWasm.Core</strong> <br> <a href="https://www.nuget.org/packages/SpawnDev.BlazorJS.FFmpegWasm.Core" rel="nofollow"><img src="https://camo.githubusercontent.com/3d5a593e7aef769123997cc9860cdce8a50026d5abada5f1b21b87a8555683ca/68747470733a2f2f62616467652e667572792e696f2f6e752f537061776e4465762e426c617a6f724a532e46466d7065675761736d2e436f72652e737667" alt="NuGet version" data-canonical-src="https://badge.fury.io/nu/SpawnDev.BlazorJS.FFmpegWasm.Core.svg" style="max-width: 100%;"></a></td>
            <td>Includes SpawnDev.BlazorJS.FFmpegWasm and ffmpeg.wasm core resources</td>
            <td>core/*<br>ffmpeg-core.js<br>ffmpeg-core.wasm</td>
        </tr>
        <tr>
            <td><strong>SpawnDev.BlazorJS.FFmpegWasm.CoreMT</strong> <br> <a href="https://www.nuget.org/packages/SpawnDev.BlazorJS.FFmpegWasm.CoreMT" rel="nofollow"><img src="https://camo.githubusercontent.com/9c5195371a9d889c7f874899e68ea2e9a45dea972bead8b97702f57d53b514fa/68747470733a2f2f62616467652e667572792e696f2f6e752f537061776e4465762e426c617a6f724a532e46466d7065675761736d2e436f72654d542e737667" alt="NuGet version" data-canonical-src="https://badge.fury.io/nu/SpawnDev.BlazorJS.FFmpegWasm.CoreMT.svg" style="max-width: 100%;"></a></td>
            <td>Includes SpawnDev.BlazorJS.FFmpegWasm and ffmpeg.wasm core-mt resources</td>
            <td>core-mt/*<br>ffmpeg-core.js<br>ffmpeg-core.wasm<br>ffmpeg-core.worker.js</td>
        </tr>
    </tbody>
</table>
@code {
    [Inject]
    BlazorJSRuntime JS { get; set; }

    [Inject]
    FFmpegFactory FFmpegFactory { get; set; }

    ElementReference videoResult;
    HTMLVideoElement? videoEl;
    bool loaded = false;
    bool busy = false;
    string logMessage = "";
    string progressMessage = "";
    FFmpeg? ffmpeg = null;
    ElementReference fileInputRef;
    HTMLInputElement? fileInput;
    bool beenInit = false;
    double percentComplete = 0; 

    protected override void OnAfterRender(bool firstRender)
    {
        if (!beenInit)
        {
            beenInit = true;
            videoEl = new HTMLVideoElement(videoResult);
            fileInput = new HTMLInputElement(JS.ToJSRef(fileInputRef));
            fileInput.OnChange += FileInput_OnChange;
        }
    }

    public void Dispose()
    {
        if (beenInit)
        {
            beenInit = false;
            videoEl.Dispose();
            fileInput.OnChange -= FileInput_OnChange;
            fileInput.Dispose();
        }
        if (ffmpeg != null)
        {
            ffmpeg.Terminate();
            ffmpeg.Dispose();
            ffmpeg = null;
        }
    }

    void FileInput_OnChange(Event ev)
    {
        using var files = fileInput.Files;
        var file = files != null && files.Length > 0 ? files[0] : null;
        if (file == null) return;
        _ = TranscodeLocalFile(file);
    }

    async Task Load()
    {
        busy = true;
        StateHasChanged();
        await FFmpegFactory.Init();
        ffmpeg = new FFmpeg();
        ffmpeg.OnLog += FFmpeg_OnLog;
        ffmpeg.OnProgress += FFmpeg_OnProgress;
        // Use FFmpegFactory extension methods supplied by the Nuget packages
        // SpawnDev.BlazorJS.FFmpegWasm.Core
        // SpawnDev.BlazorJS.FFmpegWasm.CoreMT
        //
        // From SpawnDev.BlazorJS.FFmpegWasm.Core
        // - Contains the ffmpeg.wasm core for single thread files
        // - Adds CreateLoadCoreConfig to FFmpegFactory
        // From SpawnDev.BlazorJS.FFmpegWasm.CoreMT
        // - Contains the ffmpeg.wasm core for multi thread files
        // - Adds CreateLoadCoreMTConfig to FFmpegFactory
        // Single thread and multi thread versions acn be used independently of each other to lower resource packaging.
        var loadConfig = FFmpegFactory.MultiThreadSupported ? FFmpegFactory.CreateLoadCoreMTConfig() : FFmpegFactory.CreateLoadCoreConfig();
        await ffmpeg.Load(loadConfig);
        busy = false;
        loaded = true;
        StateHasChanged();
    }

    async Task TranscodeLocalFile(File file)
    {
        busy = true;
        StateHasChanged();
        var inputDir = "/input";
        var inputFile = $"/input/{file.Name}";
        await ffmpeg.CreateDir(inputDir);
        await ffmpeg.MountWorkerFS(inputDir, new FSMountWorkerFSOptions { Files = new[] { file } });
        var ls = await ffmpeg.ListDir(inputDir);
        logMessage = "Transcoding source video";
        StateHasChanged();
        var ret = await ffmpeg.Exec(new string[] { "-i", inputFile, "output.mp4" });
        logMessage = "Source video transcoded";
        StateHasChanged();
        await ffmpeg.Unmount(inputDir);
        await ffmpeg.DeleteDir(inputDir);
        using var data = await ffmpeg.ReadFileUint8Array("output.mp4");
        using var blob = new Blob(new Uint8Array[] { data }, new BlobOptions { Type = "video/mp4" });
        var objSrc = URL.CreateObjectURL(blob);
        videoEl.Src = objSrc;
        busy = false;
        StateHasChanged();
    }

    void FFmpeg_OnLog(FFmpegLogEvent ev)
    {
        logMessage = ev.Message;
        JS.Log("FFmpeg_OnLog", ev.Message);
        StateHasChanged();
    }

    void FFmpeg_OnProgress(FFmpegProgressEvent ev)
    {
        var progress = ev.Progress;
        var time = ev.Time;
        progressMessage = $"{progress * 100} % (transcoded time: {time / 1000000} s)";
        JS.Log("FFmpeg_OnProgress", ev.Time, ev.Progress);
        percentComplete = ev.Progress * 100d;
        StateHasChanged();
    }
}

