@page "/"
@using System.Text
@using SpawnDev.BlazorJS
@using SpawnDev.BlazorJS.FFmpegWasm
@implements IDisposable

<h3>Basic Demo of ffmpeg.wasm in Blazor</h3>
<p>A simple demo of ffmpeg.wasm in Blazor WASM using SpawnDev.BlazorJS.FFmpegWASM packages</p>
<p><a href="https://github.com/LostBeard/SpawnDev.BlazorJS.FFmpegWasm/blob/main/SpawnDev.BlazorJS.FFmpegWasmDemo/Pages/BasicFactoryExample.razor">Page source code</a></p>
<video @ref=videoResult autoplay muted id="video-result" controls style="border: 1px solid black;"></video>
<br />
<div>
    <button @onclick=Load disabled="@(loaded || busy)" id="load-button">Load ffmpeg-core (~31 MB)</button>
    <br />
    <br />
</div>
<div>
    Select file to test transcoding to mp4.<br />
    <input @ref=fileInputRef accept="video/*" type="file" disabled="@(!loaded || busy)" style="width: 100%;" /><br />
    <br />
    <input type="checkbox" @bind="@useWorkerFS" disabled="@(!loaded || busy)" name="useWorkerFS" /><label for="useWorkerFS">Use WorkerFS</label><br />
    <br />
    <button @onclick=Transcode disabled="@(!loaded || busy || sourceFile == null)" id="transcode-button">Transcode to mp4</button><br />
    Multithreading will be used: @FFmpegFactory.MultiThreadSupported<br />
    <br />
    <div style="width: 100%; background-color: grey; position: relative;">
        <div style="width: @(percentComplete)%; background-color: cadetblue; height: 36px;">
        </div>
        <div style="padding-top: 0; top: 0; left: 0; position: absolute; height: 100%; width: 100%; background-color: transparent; font-weight: bold; text-align: center; font-size: 24px;">
            @(Math.Round(percentComplete, 3)) %
        </div>
    </div>
</div>
<p>@logMessage</p>
<p>@progressMessage</p>
<p>Open Developer Tools (Ctrl+Shift+I) to View Logs</p>

@code {
    [Inject]
    BlazorJSRuntime JS { get; set; }

    [Inject]
    FFmpegFactory FFmpegFactory { get; set; }

    ElementReference videoResult;
    HTMLVideoElement? videoEl;
    bool loaded = false;
    bool busy = false;
    string logMessage = "";
    string progressMessage = "";
    FFmpeg? ffmpeg = null;
    ElementReference fileInputRef;
    HTMLInputElement? fileInput;
    bool beenInit = false;
    double percentComplete = 0;
    bool useWorkerFS = true;
    File? sourceFile = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!beenInit)
        {
            beenInit = true;
            videoEl = new HTMLVideoElement(videoResult);
            fileInput = new HTMLInputElement(JS.ToJSRef(fileInputRef));
            fileInput.OnChange += FileInput_OnChange;
        }
    }

    public void Dispose()
    {
        if (beenInit)
        {
            beenInit = false;
            videoEl!.Dispose();
            fileInput!.OnChange -= FileInput_OnChange;
            fileInput.Dispose();
        }
        if (ffmpeg != null)
        {
            ffmpeg.Terminate();
            ffmpeg.Dispose();
            ffmpeg = null;
        }
        sourceFile?.Dispose();
        sourceFile = null;
    }

    void FileInput_OnChange(Event ev)
    {
        using var files = fileInput!.Files;
        sourceFile = files!.Length > 0 ? files[0] : null;
        StateHasChanged();
    }

    async Task Load()
    {
        busy = true;
        StateHasChanged();
        await FFmpegFactory.Init();
        ffmpeg = new FFmpeg();
        ffmpeg.OnLog += FFmpeg_OnLog;
        ffmpeg.OnProgress += FFmpeg_OnProgress;
        // Use FFmpegFactory extension methods supplied by the Nuget packages
        // SpawnDev.BlazorJS.FFmpegWasm.Core
        // SpawnDev.BlazorJS.FFmpegWasm.CoreMT
        //
        // From SpawnDev.BlazorJS.FFmpegWasm.Core
        // - Contains the ffmpeg.wasm core for single thread files
        // - Adds CreateLoadCoreConfig to FFmpegFactory
        // From SpawnDev.BlazorJS.FFmpegWasm.CoreMT
        // - Contains the ffmpeg.wasm core for multi thread files
        // - Adds CreateLoadCoreMTConfig to FFmpegFactory
        // Single thread and multi thread versions acn be used independently of each other to lower resource packaging.
        var loadConfig = FFmpegFactory.MultiThreadSupported ? FFmpegFactory.CreateLoadCoreMTConfig() : FFmpegFactory.CreateLoadCoreConfig();
        await ffmpeg.Load(loadConfig);
        busy = false;
        loaded = true;
        StateHasChanged();
    }

    async Task Transcode()
    {
        if (sourceFile == null) return;
        busy = true;
        StateHasChanged();
        var inputDir = "/input";
        var inputFile = $"/input/{sourceFile.Name}";
        await ffmpeg.CreateDir(inputDir);
        if (useWorkerFS)
        {
            // using WORKERFS. the file handle will be shared with the main worker
            await ffmpeg.MountWorkerFS(inputDir, new FSMountWorkerFSOptions { Files = new[] { sourceFile } });
        }
        else
        {
            // not using WORKERFS. the entire file will be read into memory and transferred to the main worker
            using var arrayBuffer = await sourceFile.ArrayBuffer();
            using var uint8Array = new Uint8Array(arrayBuffer);
            await ffmpeg.WriteFile(inputFile, uint8Array);
        }
        //var ls = await ffmpeg.ListDir(inputDir);
        logMessage = "Transcoding source video";
        StateHasChanged();
        var ret = await ffmpeg.Exec(new string[] { "-i", inputFile, "output.mp4" });
        logMessage = "Source video transcoded";
        StateHasChanged();
        // empty the input folder
        if (useWorkerFS)
        {
            await ffmpeg.Unmount(inputDir);
        }
        else
        {
            await ffmpeg.DeleteFile(inputFile);
        }
        // delete the input folder
        await ffmpeg.DeleteDir(inputDir);
        using var data = await ffmpeg.ReadFileUint8Array("output.mp4");
        using var blob = new Blob(new Uint8Array[] { data }, new BlobOptions { Type = "video/mp4" });
        var objSrc = URL.CreateObjectURL(blob);
        videoEl!.Src = objSrc;
        busy = false;
        StateHasChanged();
    }

    void FFmpeg_OnLog(FFmpegLogEvent ev)
    {
        logMessage = ev.Message;
        JS.Log("FFmpeg_OnLog", ev.Message);
        StateHasChanged();
    }

    void FFmpeg_OnProgress(FFmpegProgressEvent ev)
    {
        var progress = ev.Progress;
        var time = ev.Time;
        progressMessage = $"{progress * 100} % (transcoded time: {time / 1000000} s)";
        JS.Log("FFmpeg_OnProgress", ev.Time, ev.Progress);
        percentComplete = ev.Progress * 100d;
        StateHasChanged();
    }
}

